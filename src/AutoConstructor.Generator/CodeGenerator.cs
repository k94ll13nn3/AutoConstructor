using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace AutoConstructor.Generator;

public class CodeGenerator
{
    private MemberDeclarationSyntax? _current;

    public CodeGenerator AddNamespace(string identifier, bool enableNullChecks)
    {
        if (_current is not null)
        {
            throw new InvalidOperationException($"Method {nameof(AddNamespace)} must be called first.");
        }

        _current = GetNamespace(identifier, enableNullChecks);
        return this;
    }
    public CodeGenerator AddClass(string identifier)
    {
        ClassDeclarationSyntax classSyntax = GetClass(identifier);

        if (_current is null)
        {
            _current = classSyntax;
        }
        else if (_current is BaseNamespaceDeclarationSyntax namespaceDeclarationSyntax)
        {
            ClassDeclarationSyntax lastClassSyntax = namespaceDeclarationSyntax.DescendantNodes().OfType<ClassDeclarationSyntax>().LastOrDefault();
            _current = lastClassSyntax is not null
                ? namespaceDeclarationSyntax.ReplaceNode(lastClassSyntax, lastClassSyntax.AddMembers(classSyntax))
                : namespaceDeclarationSyntax.AddMembers(classSyntax);
        }
        else
        {
            throw new InvalidOperationException($"Cannot run {nameof(AddClass)}");
        }

        return this;
    }

    public CodeGenerator AddConstructor(string[] parameters)
    {
        if (_current is ClassDeclarationSyntax classDeclarationSyntax)
        {
            _current = classDeclarationSyntax.AddMembers(GetConstructor(classDeclarationSyntax.Identifier, parameters));
        }
        else if (_current is BaseNamespaceDeclarationSyntax namespaceDeclarationSyntax && namespaceDeclarationSyntax.Members.First() is ClassDeclarationSyntax)
        {
            ClassDeclarationSyntax lastClassSyntax = namespaceDeclarationSyntax.DescendantNodes().OfType<ClassDeclarationSyntax>().LastOrDefault();
            if (lastClassSyntax is null)
            {
                throw new InvalidOperationException("No class was added to the generator.");
            }

            _current = namespaceDeclarationSyntax.ReplaceNode(lastClassSyntax, lastClassSyntax.AddMembers(GetConstructor(lastClassSyntax.Identifier, parameters)));
        }
        else if (_current is null)
        {
            throw new InvalidOperationException("No class was added to the generator.");
        }
        else
        {
            throw new InvalidOperationException($"Cannot run {nameof(AddConstructor)}");
        }

        return this;
    }

    public override string ToString()
    {
        if (_current is null)
        {
            return string.Empty;
        }

        SyntaxTree tree = SyntaxTree(CompilationUnit().AddMembers(_current).NormalizeWhitespace());

        return tree.ToString();
    }

    private static BaseNamespaceDeclarationSyntax GetNamespace(string identifier, bool enableNullChecks = false)
    {
        var trivias = new List<SyntaxTrivia> { Comment("// <auto-generated />") };
        if (enableNullChecks)
        {
            trivias.Add(Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true)));
        }

        return NamespaceDeclaration(IdentifierName(identifier))
            .WithNamespaceKeyword(Token(TriviaList(trivias), SyntaxKind.NamespaceKeyword, TriviaList()));
    }

    private static ClassDeclarationSyntax GetClass(string identifier)
    {
        return ClassDeclaration(identifier)
            .AddModifiers(Token(SyntaxKind.PartialKeyword));
    }

    private static ConstructorDeclarationSyntax GetConstructor(SyntaxToken identifier, string[] parameters)
    {
        return ConstructorDeclaration(identifier)
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .AddParameterListParameters(parameters.Select(GetParameter).ToArray())
            .AddBodyStatements(parameters.Select(p => GetParameterAssignement(p, p == "t")).ToArray());
    }

    private static ParameterSyntax GetParameter(string identifier)
    {
        return Parameter(Identifier(identifier))
            .WithType(PredefinedType(Token(SyntaxKind.IntKeyword)));
    }

    private static ExpressionStatementSyntax GetParameterAssignement(string identifier, bool emitArgumentNullException = false)
    {
        ExpressionSyntax left = MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, ThisExpression(), IdentifierName($"_{identifier}"));
        ExpressionSyntax right = IdentifierName(identifier);
        if (emitArgumentNullException)
        {
            right = BinaryExpression(
                        SyntaxKind.CoalesceExpression,
                        right,
                        ThrowExpression(
                            ObjectCreationExpression(QualifiedName(IdentifierName("System"), IdentifierName("ArgumentNullException")))
                            .AddArgumentListArguments(Argument(NameOf("name2")))));
        }

        return ExpressionStatement(AssignmentExpression(SyntaxKind.SimpleAssignmentExpression, left, right));
    }

    private static InvocationExpressionSyntax NameOf(string identifier)
    {
        SyntaxToken nameofIdentifier = Identifier(TriviaList(), SyntaxKind.NameOfKeyword, "nameof", "nameof", TriviaList());
        return InvocationExpression(IdentifierName(nameofIdentifier))
            .AddArgumentListArguments(Argument(IdentifierName(identifier)));
    }
}
